[project]
name = "django-docutils"
version = "0.28.0"
description = "Docutils (a.k.a. reStructuredText, reST, RST) support for django."
requires-python = ">=3.10,<4.0"
authors = [
  {name = "Tony Narlock", email = "tony@git-pull.com"}
]
license = { text = "MIT" }
readme = "README.md"
classifiers = [
  'Development Status :: 2 - Pre-Alpha',
  'Framework :: Django',
  'Framework :: Django :: 4.2',
  'Framework :: Django :: 5.0',
  'Framework :: Django :: 5.1',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Natural Language :: English',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: 3.13',
  'Programming Language :: Python :: 3.14',
  "Typing :: Typed",
]
keywords = ["django", "docutils", "reStructuredText", "rst", "reST"]
homepage = "https://django-docutils.git-pull.com"
packages = [
  { include = "*", from = "src" },
]
include = [
  { path = "tests", format = "sdist" },
]
dependencies = [
  "django>=4.2",
  "docutils",
  "pygments<3"
]

[tool.project]
"Bug Tracker" = "https://github.com/tony/django-docutils/issues"
Documentation = "https://django-docutils.git-pull.com"
Repository = "https://github.com/tony/django-docutils"
Changes = "https://github.com/tony/django-docutils/blob/master/CHANGES"
"Q & A" = "https://github.com/tony/django-docutils/discussions"

[project.optional-dependencies]
pytz = [
  "pytz"
]

[dependency-groups]
dev = [
  # Docs
  "sphinx",
  "furo",
  "gp-libs",
  "sphinx-autobuild",
  "sphinx-autodoc-typehints",
  "sphinx-inline-tabs",
  "sphinxext-opengraph",
  "sphinx-copybutton",
  "sphinxext-rediraffe",
  "sphinx-click",
  "myst-parser",
  "linkify-it-py",
  # Testing
  "gp-libs",
  "pytest",
  "pytest-rerunfailures",
  "pytest-mock",
  "pytest-watcher",
  "pytest-django",
  "dj-inmemorystorage",
  # Coverage
  "codecov",
  "coverage",
  "pytest-cov",
  # Lint
  "ruff",
  "mypy",
  "django-stubs",
  "docutils-stubs",
  "types-docutils",
  "types-Pygments",
  "types-pytz",
]

docs = [
  "sphinx",
  "furo",
  "gp-libs",
  "sphinx-autobuild",
  "sphinx-autodoc-typehints",
  "sphinx-inline-tabs",
  "sphinxext-opengraph",
  "sphinx-copybutton",
  "sphinxext-rediraffe",
  "sphinx-click",
  "myst-parser",
  "linkify-it-py",
]
testing = [
  "gp-libs",
  "pytest",
  "pytest-rerunfailures",
  "pytest-mock",
  "pytest-watcher",
  "pytest-django",
  "dj-inmemorystorage"
]
coverage =[
  "codecov",
  "coverage",
  "pytest-cov",
]
lint = [
  "ruff",
  "mypy",
  "django-stubs",
  "docutils-stubs",
  "types-docutils",
  "types-Pygments",
  "types-pytz",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
plugins = ["mypy_django_plugin.main"]
python_version = "3.9"
files = [
  "src/",
  "tests/",
]
enable_incomplete_feature = []

[tool.django-stubs]
django_settings_module = "tests.settings"

[[tool.mypy.overrides]]
module = [
  "inmemorystorage.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["django_docutils.lib.publisher"]
disable_error_code = [
    "unused-ignore",   # Unused "type: ignore" comment
    "arg-type",        # Argument type incompatibility
    "union-attr",      # Attribute access on union types
    "redundant-cast",  # Redundant cast
    "var-annotated",   # Need type annotation for "reader"
    "no-any-return"    # Returning Any from function declared to return "document"
]

[[tool.mypy.overrides]]
module = ["django_docutils.lib.roles.common"]
disable_error_code = [
    "call-arg"  # Too many arguments for "Text"
]

[[tool.mypy.overrides]]
module = ["django_docutils.lib.metadata.extract"]
disable_error_code = [
    "misc"  # Need more than 0 values to unpack (2 expected)
]

[[tool.mypy.overrides]]
module = ["django_docutils.template"]
disable_error_code = [
    "attr-defined"  # Module "django.template.base" does not explicitly export attribute "Context"
]

[[tool.mypy.overrides]]
module = ["django_docutils.lib.writers"]
disable_error_code = [
    "arg-type"  # Argument has incompatible type with HTMLTranslator methods
]

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "UP", # pyupgrade
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "COM", # flake8-commas
  "EM", # flake8-errmsg
  "Q", # flake8-quotes
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
  "D", # pydocstyle
  "FA100",  # future annotations
]
ignore = [
  "COM812", # missing trailing comma, ruff format conflict
]
extend-safe-fixes = [
  "UP006",
  "UP007",
]
pyupgrade.keep-runtime-typing = false

[tool.ruff.lint.isort]
known-first-party = [
  "django_docutils",
]
combine-as-imports = true
required-imports = [
  "from __future__ import annotations",
]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = [
  "code",
  "dataclasses",
  "email",
  "types",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"src/**/*.py" = ["PTH"]

[tool.pytest.ini_options]
addopts = "--tb=short --no-header --showlocals --doctest-modules"
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE"
testpaths = [
  "src/django_docutils",
  "tests",
  "docs",
]
pythonpath = ". tests"
filterwarnings = [
  "ignore::PendingDeprecationWarning",
  "ignore:The frontend.Option(Parser)? class.*:DeprecationWarning::",
]

# pytest-django
django_find_project = false
DJANGO_SETTINGS_MODULE = 'tests.settings'

[tool.coverage.run]
omit = [
  "docs/conf.py",
]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if t.TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
  "from __future__ import annotations",
]
